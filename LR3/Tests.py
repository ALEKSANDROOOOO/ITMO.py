import unittest
from main import gen_bin_tree


# Тесты
class TestMath(unittest.TestCase):

    # Дерево меньшей глубины и корнем с заданными условиями формулы ветки
    def test_depth(self):
        self.assertEqual(gen_bin_tree(3, 10), {10: [{22: [0, 0]}, {18: [0, 0]}]})

    # Меняем формулы веток на 3*(x+1) и 3*(x-1)
    def test_branches(self):
        self.assertEqual(gen_bin_tree(6, 15), {15: [{48: [{147: [{444: [{1335: [0, 0]}, {1329: [0, 0]}]}, {438: [{1317: [0, 0]}, {1311: [0, 0]}]}]}, {141: [{426: [{1281: [0, 0]}, {1275: [0, 0]}]}, {420: [{1263: [0, 0]}, {1257: [0, 0]}]}]}]}, {42: [{129: [{390: [{1173: [0, 0]}, {1167: [0, 0]}]}, {384: [{1155: [0, 0]}, {1149: [0, 0]}]}]}, {123: [{372: [{1119: [0, 0]}, {1113: [0, 0]}]}, {366: [{1101: [0, 0]}, {1095: [0, 0]}]}]}]}]})

    # Меняем все. формулы веток (l R): 4*(x+1) и 5*(x-1)
    def test_new_tree(self): 
        self.assertEqual(gen_bin_tree(4, 12), {12: [{52: [{212: [0, 0]}, {255: [0, 0]}]}, {55: [{224: [0, 0]}, {270: [0, 0]}]}]})


# Запуск тестов
if __name__ == '__main__':
    unittest.main()
    

